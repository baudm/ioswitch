#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
% for subfigures/subtables
\ifCLASSOPTIONcompsoc
\usepackage[caption=false,font=normalsize,labelfont=sf,textfont=sf]{subfig}
\else
\usepackage[caption=false,font=footnotesize]{subfig}
\fi
\end_preamble
\use_default_options false
\language english
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Your Title"
\pdf_author "Your Name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
You find the IEEEtran document class documentation here: http://mirror.ctan.org/ma
cros/latex/contrib/IEEEtran/IEEEtran_HOWTO.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Title

\size huge
Workload-dependent Dynamic Disk I/O Scheduler Selection for Throughput Optimizat
ion
\end_layout

\begin_layout Author
Jermaine Luis M.
 Agnasin, Mark Earvin V.
 Alba, Thomas Neil P.
 Balauag, Darwin M.
 Bautista
\begin_inset Newline newline
\end_inset


\emph on
Electronics and Electrical Engineering Institute, University of the Philippines
 Diliman
\end_layout

\begin_layout MarkBoth
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}{
\end_layout

\end_inset

Your Name 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
MakeLowercase{
\end_layout

\end_inset


\emph on
et al.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\emph default
: Your Title
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
left side
\series bold
}{
\series default
right side
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
As processors continue to improve in performance, mass storage devices lag
 behind significantly.
 Access to mass storage devices is becoming the performance bottleneck of
 the overall system performance.
 Many I/O scheduling algorithms have been developed to remove or reduce
 the bottleneck of disk accesses.
 But there is no single I/O scheduling algorithm that would best serve all
 types of workload.
\end_layout

\begin_layout Abstract
This study aims to implement a dynamic I/O scheduler switcher that maximizes
 throughput of disks by selecting the appropriate I/O scheduler for the
 current workload.
 The I/O scheduler switcher analyzes the current workload by computing for
 the statistics of the disk.
 It would then categorize the current workload to either of the four: random
 read, random write, sequential read, sequential write.
 And based on that, it would switch to the appropriate I/O scheduler that
 maximizes the throughput of the disk.
\end_layout

\begin_layout Keywords
I/O scheduling, workload characterization
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The 
\series bold

\backslash
IEEEPARstart
\series default
 command is needed in the first paragraph fo the document.
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
IEEEPARstart{
\end_layout

\end_inset

 C
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}{
\end_layout

\end_inset

omputer
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 hardware has been generally improving over the past decades.
 However, I/O-related hardware has not been able to cope with the advances
 in CPU technology.
 In a computer, the I/O system is often the performance bottleneck.
 Thus, being able to utilize the full capacity of a computer's I/O hardware
 is the key to achieving optimum system performance.
\end_layout

\begin_layout Standard
Most Linux users run different types of programs.
 Some use their computers as web servers or routers and as desktop workstations
 as well.
 Other users also run desktop applications but leave their computers while
 compiling a kernel or a big application.
 In other words, workload characteristics of computers vary from time to
 time.
 With that said, kernels optimized for a specific workload would be suboptimal.
 Tuning the kernel on-the-fly is what modern users would need.
\end_layout

\begin_layout Standard
The I/O scheduler is the part of the kernel that decides which request (read
 or write) should be performed next.
 The Linux kernel has a choice of four schedulers, but most distributions
 use the default Completely Fair Queuing (CFQ) scheduler for their desktop
 kernels.
 It has been the default in Linux since version 2.6.18.
 It is generally a recommendable all-round scheduler which offers suitable
 performance in sharing drive access between all the different processes
 that are trying to access the drive at the same time.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Some common I/O scheduler goals are:
\end_layout

\begin_layout Itemize
To minimize time wasted by hard disk seeks.
\end_layout

\begin_layout Itemize
To prioritize a certain process' I/O requests.
\end_layout

\begin_layout Itemize
To give a share of the disk bandwidth to each running process.
\end_layout

\begin_layout Itemize
To guarantee that certain requests will be serviced before a particular
 deadline.
\end_layout

\begin_layout Standard
Since no single I/O scheduler can be optimal for all types of workloads,
 changing the I/O scheduler to suit the current workload would yield better
 overall system performance.
\end_layout

\begin_layout Standard
We aim to develop a dynamic I/O scheduler switcher based on defined workloads.
 The I/O scheduler selected by the dynamic switcher should deliver the best
 performance, in terms of throughput, for the current workload.
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
This chapter provides a review of prior work related to this study.
 Both prior research deal with I/O optimization via automatic I/O scheduler
 selection based on statistics.
\end_layout

\begin_layout Subsection
Automatic I/O Scheduler Selection
\end_layout

\begin_layout Standard
Automatic and Dynamic I/O scheduler selection algortihm, called ADIO, automates
 scheduler selection based on system characteristics and current workload
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

.
\end_layout

\begin_layout Standard
The main criteria for this proposed selection is bounded latency and maximum
 throughput.
 ADIO ensures that the maximum request latency is bounded.
 If it is, it prioritizes throughput.
 This optimization is done using feedback-based control, which is called
 Dynamic and Adaptive Scheduler Selector (DASS).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/adio.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
ADIO Architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The DASS consists of two components: a request statistics collection monitor
 and an I/O scheduler selection controller.
 The request statistics collection monitor collects the maximum latency
 for read and write requests and the number of read and write requests serviced
 .
 The statistics is recorded and is then used by the controller to determine
 which scheduler should be active to accommodate latency and bandwidth guarantee
s.
 The controller does this every adaptation period W.
 In the event of process deadline expiration, the controller switches from
 CFQ to deadline.
 However, to prevent frequent switching due to I/O burst, a switch is triggered
 only if at least two process did not meet their deadlines.
 For deadline to CFQ switch, the requirement is for the maximum latency
 to be below 50% of the upper bound.
\end_layout

\begin_layout Standard
Their experimental results using tiobench showed that DASS enforces latency
 bounds, while providing better utilization than the default scheduler,
 CFQ.
\end_layout

\begin_layout Subsection
Dynamic Disk Scheduling Algorithm
\end_layout

\begin_layout Standard
The I/O Analyzer (IOAZ) 
\begin_inset CommandInset citation
LatexCommand cite
key "key-5"

\end_inset

 attempts to examine the pattern of I/O requests in real-time.
 Based on the pattern examined and the decision matrices, the IOAZ appropriately
 changes the I/O scheduler in use.
\end_layout

\begin_layout Standard
IOAZ saves information of I/O requests from hooks placed within the Disk
 Request Queuing System to its internal Activity Store.
 An I/O Analyzer Process periodically analyzes data collected during the
 last period of time from the Activity Store and purges this data when it
 is no longer needed.
 This anlysis first identifies the pattern in disk accesses by comparing
 it with emprically derived thresholds.
 And then, it determines the best I/O scheduler for that pattern based on
 decision matrices derived from their experiments.
 The IOAZ changes the I/O scheduler if needed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/ioaz.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IOAZ Architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
They defined the patterns as sequential read, sequential write, random read,
 and random write.
 Their indicator of a pattern being sequential or random is the number of
 I/O merge requests, which pools multiple requests for adjacent disk blocks
 into a single request for multiple blocks.
 They argue that large number of I/O merged requests is highly indicative
 of sequential activity and vice versa.
\end_layout

\begin_layout Standard
They used MySQL's sql-bench to test the IOAZ's performance.
 They also conducted disk zeroing experiment, wherein one gigabyte partition
 was overwritten with zeroes in a sequential fashion in a single pass.
 In both tests, IOAZ performed better compared to other I/O scheduler.
\end_layout

\begin_layout Standard
Lastly, a test using IOZone was carried out.
 The IOAZ outperformed the Deadline and CFQ scheduler, but had difficulty
 bettering AS in experiments with many processes or FCFS in experiments
 with a single process.
 They found out that it was because of the overhead when the IOAZ switches
 scheduler.
\end_layout

\begin_layout Subsection
Self-Learning Disk Scheduling
\end_layout

\begin_layout Standard
The self-learning scheduler characterizes I/O workloads by a number of essential
 attributes, classifies them at runtime, and makes the best I/O scheduling
 decision.
 The goal of the self-learning scheduler is to have the maximum performance
 (highest throughput or the shortest response time), to make a fast decision
 on which I/O Scheduler to be applied (low overhead), to accurately classify
 the current workload and to guarantee fairness to all processes
\begin_inset CommandInset citation
LatexCommand cite
key "key-7"

\end_inset

.
\end_layout

\begin_layout Standard
The self-learning scheduling scheme introduces a new type of intelligent
 disk I/O schedulers, self-learning schedulers, which can learn about the
 storage system, train themselves automatically, adapt to various types
 of workloads, and make optimal scheduling decisions.
 There are four self-learning scheduling schemes, namely, Change-sensing
 Round-Robin, Feedback Learning, Per-request Learning, and Two-layer Learning.
 
\end_layout

\begin_layout Standard
The Change-sensing Round-Robin algorithm invokes all schedulers in a round-robin
 fashion for a short time.
 Then it logs all performance data such as response time and throughput
 into the log database (data gathering), compares the performance, and selects
 the best scheduler.
 However workloads and system configurations may change and frequent switching
 of the scheduler may impose a high overhead, so the data must be gathered
 only when a significant change of the workload is detected or when a significan
tly deteriorated system performance is observed.
\end_layout

\begin_layout Standard
The Feedback Learning Algorithm corrects errors in learning models and provides
 better adaptivity.
 If a new disk scheduling policy is activated and decreased performance
 is continuously observed, the feedback mechanism can force the system to
 switch back to the old disk scheduling policy and self-correct the classificati
on and decision model.
 Moreover all the performance data are logged into the database, a further
 comprehensive analysis can be done with real-world data.
 Therefore, the learning and selection model becomes more accurate.
\end_layout

\begin_layout Standard
In Per-request Learning, the self-learning scheduler makes scheduling decisions
 at the request level instead of the workload level.
 The decision is based on the analysis of the individual request instead
 of the workload.
 They estimate the response time for each request in the waiting queue and
 schedule the request with the shortest estimated response time.
\end_layout

\begin_layout Standard
The Two-layer Learning algorithm combines workload-level and request-level
 learning algorithms and employs feedback mechanisms.
 One can implement a self learning core that consists of several regular
 I/O schedulers and one self-learning scheduler, the Per-request Learning
 Algorithm.
 This incorporates Feedback Learning Algorithm and Per-request Learning
 Algorithm into a two-layer self-learning scheduling scheme.
\end_layout

\begin_layout Standard
Machine learning techniques are effectively used in self-learning disk scheduler
s to automate the scheduling policy selection and optimization processes.
 The self-learning scheduler automatically creates I/O performance models,
 gathers system workload information, does both offline and online analysis,
 and fits into the operating system kernel.
 
\end_layout

\begin_layout Standard
In the performed experiments, they used the kernel I/O schedulers of Linux
 2.6.13 and feed the system with real-world and synthetic workloads to collect
 performance data.
 They also compare three configuration modes of the self-learning scheduler:
 online, offline, and combined configurations.
 They evaluate the performance and overhead for both real-world applications
 and simulated scenarios.
 The results show that the Two-layer Learning Scheme has the best performance
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-7"

\end_inset

.
 
\end_layout

\begin_layout Section
Methodology
\end_layout

\begin_layout Subsection
Workload Characterization
\end_layout

\begin_layout Standard
We define two types of workloads based on I/O access patterns.
 The first type is the Sequential I/O workload.
 In Sequential I/O, the physical disks spend most of their time scanning
 a range of data clustered together in the same part of the disk.
 This type of access pattern results in high data transfer per I/O request
 (or request size).
 The Sequential I/O workload is exhibited mainly by file servers and streaming
 media servers 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
\end_layout

\begin_layout Standard
The other type is the Random I/O workload.
 In this type of workload, the physical disks spend a measurable percentage
 of time seeking data from various different parts of the disk for read
 or write purposes.
 Thus, this type of access pattern results in relatively smaller request
 sizes, compared to Sequential I/O.
 Random I/O workload is often displayed by database servers, web servers,
 and mail servers 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
 Since desktop workstations tend to be used for various tasks, desktop workload
 can be considered as either Sequential or Random.
\end_layout

\begin_layout Standard
Since I/O can never be purely sequential or random for any given time, we
 define 
\emph on
Sequential I/O Ratio (SR)
\emph default
 as the measure of how much of the I/O requests is sequential in nature.
 The SR can be obtained by getting the ratio of the 
\emph on
average request size
\emph default
 to the 
\emph on
peak average request size
\emph default
.
 A purely random I/O would have an SR close to zero.
 On the other hand, a purely sequential I/O would have an SR equal to one.
 Since disks vary from one system to another, we consider the I/O pattern
 which exhibits the highest average request size (peak average request size)
 to be the 
\emph on
purely sequential
\emph default
 I/O (SR = 1) for a particular system.
\end_layout

\begin_layout Standard
The SR will be used for determining whether an I/O pattern is sequential
 or random.
 That is, if the SR is lower than a specified value, say 0.75, then the I/O
 pattern will be considered random.
 Otherwise, if the SR is greater than or equal to that value, the I/O pattern
 will be considered sequential.
 We call that value the 
\emph on
decision point
\emph default
.
 Based on our tests, a lower decision point results in a more responsive
 decision-making, albeit susceptible to I/O bursts.
 On the other hand, a higher decision point results in a slightly less responsiv
e decision-making while being resilient to I/O bursts.
 For our purposes, we used a decision point of 0.75 to provide a good balance
 between responsiveness and I/O burst resilience.
\end_layout

\begin_layout Subsection
Block Layer Statistics
\end_layout

\begin_layout Standard
Linux provides I/O statistics per disk.
 In recent 2.6 kernels, the I/O statistics are exported into userspace via
 sysfs.
 It can be accessed via 
\series bold
/sys/block/
\emph on
<device>
\emph default
/stat
\series default
.
 The I/O statistics currently available at the block layer include 
\emph on
read I/Os
\emph default
, 
\emph on
read merges, read sectors
\emph default
, 
\emph on
read ticks, write I/Os
\emph default
, 
\emph on
write merges, write sectors
\emph default
, 
\emph on
write ticks
\emph default
, 
\emph on
in_flight
\emph default
, 
\emph on
io_ticks
\emph default
 and 
\emph on
time_in_queue
\emph default
.
\end_layout

\begin_layout Standard
As stated earlier, the two workloads, Sequential I/O and Random I/O, can
 be differentiated from each other by looking at the 
\emph on
I/O request size
\emph default
 (ratio of 
\emph on
data transferred
\emph default
 to the 
\emph on
number of I/O requests
\emph default
).
 Thus, the statistics on the 
\emph on
number of I/O requests processed
\emph default
 (
\emph on
read I/Os
\emph default
 
\shape italic
and
\shape default
 
\emph on
write I/Os
\emph default
) and the 
\emph on
number of sectors accessed
\emph default
 (
\emph on
read sectors
\emph default
 
\shape italic
and
\shape default
 
\emph on
write sectors
\emph default
) can be used for determining the current workload.
 Note that the statistics on 
\emph on
number of sectors accessed
\emph default
 is independent on the hardware and filesystem used because it is based
 on the standard 512-byte sector in UNIX.
 As such, it can be readily used for this project's purposes.
 Also, for the statistics to be useful, minimal filesystem fragmentation
 is assumed.
\end_layout

\begin_layout Subsection
I/O Scheduler Switcher
\end_layout

\begin_layout Standard
To minimize the in-kernel changes and ease development, the stock Ubuntu
 2.6.32 kernel was modified.
 We created a new function, 
\family typewriter
elv_switch()
\family default
, which is based on 
\family typewriter
elv_iosched_store()
\family default
, for changing the I/O scheduler.
 This function is 
\emph on
exported
\emph default
 using 
\family typewriter
EXPORT_SYMBOL()
\family default
 so that it can be used in kernel modules.
\end_layout

\begin_layout Standard
The scheduler switcher will be implemented as a kernel module.
 On load, it will spawn a kthread that would periodically look at the I/O
 statistics and determine the current workload.
 In addition to being identified as Sequential or Random, the workload is
 further categorized as being Read or Write.
 Once the current workload is determined, it would select the appropriate
 I/O scheduler, if needed.
 Based on related research, we have determined that the best I/O scheduler
 for Sequential I/O is 
\emph on
Anticipatory
\emph default
 while the best for Random I/O is 
\emph on
CFQ
\emph default
 for single-disk systems 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

.
\end_layout

\begin_layout Standard
We patterned the statistics processing with the CPU load computation of
 Linux.
 The 
\family typewriter
CALC_LOAD()
\family default
 macro, which is used to calculate CPU load, employs exponential moving
 average.
 The exponential moving average is a type of finite impulse response filter
 that applies weighting factor that decreases exponentially.
 The weighting for each older data point decreases exponentially, never
 reaching zero.
\end_layout

\begin_layout Standard
In our implementation, we used a 1-minute time window so that the output
 of 
\family typewriter
CALC_LOAD()
\family default
 stays responsive yet resilient against I/O bursts.
 Based on prior research, the 1-minute window is the optimum balance between
 responsiveness and resilience to I/O bursts.
\end_layout

\begin_layout Section
Results and Analysis
\end_layout

\begin_layout Standard
We devised a module that prints in 
\series bold
/var/log/messages
\series default
 the throughput of the disk being monitored.
 This module is used for testing only; it is not part of the system.
 The throughput measures the sectors written to per second and the sectors
 read from per second.
\end_layout

\begin_layout Standard
With the module described above, we conducted a series of test using the
 fio benchmarking tool 
\begin_inset CommandInset citation
LatexCommand cite
key "key-8"

\end_inset

.
 The test is composed of six fio files namely: file-server.fio, oltp.fio,
 rand-read.fio, rand-write.fio, seq-read.fio and seq-write.fio.
 These fio files determine the workloads we tested our system with.
 These six workloads were run successively and repeated five times.
 The average of the five runs at a sampling period of 5 seconds are shown
 below.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/File-Server-Read.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
File-Server Workload - Read-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/File-Server-Write.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
File-Server Workload - Write-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/OLTP-Read.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
OLTP Workload - Read-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/OLTP-Write.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
OLTP Workload - Write-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Random-Read-Read.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Random-Read Workload - Read-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Random-Read-Write.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Random-Read Workload - Write-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Random-Write-Read.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Random-Write Workload - Read-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Random-Write-Write.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Random-Write Workload - Write Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequential-Read-Read.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequential-Read Workload - Read-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequential-Read-Write.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequential-Read Workload - Write-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequential-Write-Read.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequential-Write Workload - Read Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequential-Write-Write.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequential-Write Workload - Write-Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As seen in the graphs above, the I/O scheduler switcher has achieved in
 total a better performance compared to the other schedulers in all of the
 workloads.
 The I/O scheduler switcher has a balanced throughput throughout the workloads
 tested upon it.
 As compared to other schedulers, all of them performed poorly at some point
 in the workload tested upon them.
\end_layout

\begin_layout Standard
Also, we can see that the I/O scheduler switcher follows the form of the
 better scheduler between the Anticipatory Scheduler and the CFQ Scheduler
 during a certain workload.
 This only proves that the I/O scheduler switcher successfully mimicked
 the better of the two depending on the workload.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
In this paper, we were able to design and implement a dynamic disk I/O scheduler
 in a stock Ubuntu 2.6.32 kernel.
 With its simplistic design of computing the statistics, the dynamic disk
 I/O scheduler has a small memory footprint.
 But it still can determine succesfully the current workload based on tests.
 Also, we were able to determine that the decision point of the system should
 be high enough to stay responsive and resilient against I/O bursts.
\end_layout

\begin_layout Standard
Our focus was to maximize the throughput of the disk.
 This was achieved by switching to Anticipatory, when the workload is sequential
 in nature, and to CFQ, otherwise.
 Based on the results above, the dynamic disk I/O scheduler was able to
 achieve a better performance throughout the workloads tested upon it.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

C.H Lunde, H.
 Espeland, H.
 Stensland, A.
 Petlund, and P.
 Halvorsen.
 
\begin_inset Quotes eld
\end_inset

Improving Disk I/O Performance on Linux,” in 
\shape italic
Proc.
 Linux-Kongress and OpenSolaris Developer Conference
\shape default
, 2009, pp.
 61-70.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

S.
 Seelam, J.
 S.
 Babu, and P.
 Teller.
 “Automatic I/O Scheduler Selection for Latency and Bandwidth Optimization,”
 in 
\shape italic
Proc.
 Workshop on Operating System Interference in High Performance Applications
\shape default
, 2005.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

D.
 Hoch.
 “Extreme Linux Performance Monitoring Part II.” Internet: http://www.ufsdump.org/p
apers/io-tuning.pdf, Jan.
 15, 2007 [Sep.
 16, 2010].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

S.
 Pratt and D.
 Heger.
 “Workload Dependent Performance Evaluation of the Linux 2.6 I/O Schedulers,”
 in 
\shape italic
Proc.
 Ottawa Linux Symposium
\shape default
, 2004, pp.
 425-448.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

D.
 L.
 Martens and M.
 J.
 Katchabaw.
 “Optimizing System Performance through Dynamic Disk Scheduling Algorithm
 Selection,” in 
\shape italic
Proc.
 WSEAS Trans.
 Information Science and Applications
\shape default
, 2006.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-6"

\end_inset

K.
 Brandt.
 
\begin_inset Quotes eld
\end_inset

Interpreting iostat Output.
\begin_inset Quotes erd
\end_inset

 Internet: http://blog.serverfault.com/post/777852755/interpreting-iostat-output,
 Jul.
 6, 2010 [Sep.
 16, 2010].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "key-7"

\end_inset

Y.
 Zhang and B.
 Bhargava.
 
\begin_inset Quotes eld
\end_inset

Self-learning Disk Scheduling,
\begin_inset Quotes erd
\end_inset

 in 
\shape italic
Proc.
 IEEE Transactions on Knowledge and Data Engineering
\shape default
, 2009, pp.
 50-65.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "key-8"

\end_inset

B.
 Martin.
 
\begin_inset Quotes eld
\end_inset

Inspecting disk IO performance with fio.
\begin_inset Quotes erd
\end_inset

 Internet: http://www.linux.com/archive/feature/131063
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Remember though that your final submission is supposed to have all the bibliogra
phy entries embedded in the LaTeX-file.
 This means you eventually have to copy the .bbl file into the latex file
 and remove the bibtex lines.
\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\end_body
\end_document
